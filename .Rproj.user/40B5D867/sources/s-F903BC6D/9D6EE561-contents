library(rafalib)
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
View(dat)
##Getting Started Exercises #1
colnames(dat[2])
##Getting Started Exercises #2
dat[12,2]
##Getting Started Exercises #3
a <- dat$Bodyweight
a[11]
##Getting Started Exercises #4
length(a)
##Getting Started Exercises #5
hf.bwt <- filter(dat , Diet == "hf" ) %>% select(Bodyweight) %>% unlist
mean(hf.bwt)
##Getting Started Exercises #6
set.seed(1)
sample(hf.bwt , 1)
############################################################################
dat <- read.csv("femaleMiceWeights.csv")
controls <- filter(dat , Diet == "chow") %>% select(Bodyweight) %>% unlist

##############################################################################
##dplyr Exercises #1
dat1 <- read.csv("msleep_ggplot2.csv")
View(dat1)
class(dat1)
##dplyr Exercises #2
primates <- filter(dat1 , order == "Primates") 
nrow(primates)
##dplyr Exercises #3
class(primates)
##dplyr Exercises #4
primates <- filter(dat1 , order == "Primates") %>% select(sleep_total)
class(primates)
##dplyr Exercises #5
primates <- filter(dat1 , order == "Primates") %>% select(sleep_total) %>% unlist
mean(primates)
##dplyr Exercises #6(I failed!!)
filter(dat1 , order=="Primates") %>% summarize( mean( sleep_total) )

##################################################################################
## Exploratory data analysis
library(UsingR)
View(father.son)
x <- father.son$fheight  ##we are trying to figure out how the data look like
##-----------------------------------------
sample(x,20)
rount(sample(x,20),1) ## still we have no clue
##--------------------------------------------------------------------------
hist(x , main = "Histogram of Father's Height" , xlab = "Height in inches") ## Now we can say that the data look's like Normal Distribution
##--------------------------------------------------------------------------
##ECDF(better than histogram)
xs <- seq(floor(min(x)) , ceiling(max(x)) , 0.1)
ecdf(x)
ecdf(xs)
ecdf(x)(xs)
plot(xs , ecdf(x)(xs) , type = "l" , xlab = "Height on inches" , ylab = "F(x)", main = "ECDF")
##Here we can see 80-85% of the people are less than 70 inches of height

##Normalilty check(manually)
mean(x)
sd(x)

mean(x > 70) ##Exact approximation of father that are more than 70 inches of height
1 - pnorm(70 , mean(x) , sd(x)) ##Normal approximation of father that are above 70 inches of height 

mean(x <= 70)
pnorm(70 , mean(x) , sd(x)) ##If this two aproximation gives us almost same result 
  # every time than we suspect Normal distribution is very good approximation for  
  # this data
mean(x <= 69)
pnorm(69 , mean(x) , sd(x))

##Normality check(QQ plot)
ps <- seq(0.01 , 0.99 ,  0.01)  ##1% to 99%
qs <- quantile(x , ps)  ##I'm going to compute from my data what those percentiles are.
normalqs <- qnorm(ps , mean(x) , sd(x))  ##We can compute the same percentiles for the normal distribution.
plot(normalqs , qs ,xlab = "Normal percentiles" , ylab = "Height percentiles" ) ##Now we can compare them and see how similar they are.
                      # So we're going to just plot them against each other.
                      ## This is our QQ plot
abline(0,1) ## identity line(intercept = 0 , slope = 1)

##QQplot(using function)
qqnorm(x)
qqline(x)
###################################################################################
load("skew.RData")
dim(dat)
View(dat)
## QQ-plot Exercises #1
mypar(3,3)
for(i in 1:9){
  qqnorm(dat[,i])
}
hist(dat[,4])
## QQ-plot Exercises #2
hist(dat[,9])

##BOX-PLOT
# When data is not normally distributed, than the mean and the standard deviation 
# aren't necessarily good summaries.Then we can use boxplot.
library(UsingR)
View(exec.pay)
mypar(1,2)
hist(exec.pay)
qqnorm(exec.pay)
qqline(exec.pay) ## So This data is not normally distributed
##----------------------------------------------------------------------
boxplot(exec.pay)
mean(exec.pay)
median(exec.pay)

## Boxplot exercises #1
View(InsectSprays)
mypar(1,1)
boxplot(split(InsectSprays$count , InsectSprays$spray))
boxplot(InsectSprays$count ~ InsectSprays$spray)
# Which spray seems the most effective (has the lowest median count)?
# Answer : C

## Boxplot exercises #2
library(dplyr)
library(rafalib)
library(UsingR)
View(nym.2002)
mypar(2,2)
boxplot(nym.2002$time ~ nym.2002$gender)
males <- filter(nym.2002, gender == "Male") %>% dplyr::select(time) %>% unlist
females <- filter(nym.2002, gender == "Female") %>% dplyr::select(time) %>% unlist
hist(males)
hist(females)
#########################################################################
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
control <- filter(dat , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
treatment <- filter(dat , Diet == "hf") %>% dplyr::select(Bodyweight) %>% unlist
mean(control)
mean(treatment)
obs <- mean(treatment) - mean(control)

population <- read.csv("femaleControlsPopulation.csv")
population  ##data.frame
population <- unlist(population)  ##numeric values
sample(population , 12)
mean(sample(population , 12)) ##every time we will get different result

##----------------------------------------------------------------------
##Random Variables Exercises #1
mean(population)
##Random Variables Exercises #2
set.seed(1)
x <- sample(population , 5)
abs(mean(population) - mean(x))
##Random Variables Exercises #3
set.seed(5)
x <- sample(population , 5)
abs(mean(population) - mean(x))

##---------------------------------------------------------------------
mypar(1,1)
n <- 10000
nulls <- c()
for(i in 1:n){
     control <- sample(population , 12)
    treatment <- sample(population , 12)
    nulls[i] <- mean(treatment) - mean(control)
}
hist(nulls)
max(nulls)
min(nulls)
sum(nulls > obs)
mean(nulls > obs) ##The proportion that nulls is bigger than obs.
mean(abs(nulls) > obs) # What is the probability that an outcome from 
# the null distribution is bigger than what we observed when the null
# hypothesis is true.(This is the p-value)
##---------------------------------------------------------------------
#Null Distributions Exercises #1
#What proportion of these 1,000 averages are more than 1 gram away from the average of population ?
set.seed(1)
n <- 1000
averages5 <- c()
for(i in 1:n){
  X <- sample(population,5)
  averages5[i] <- mean(X)
}
hist(averages5)    ##take a look
mean( abs( averages5 - mean(population) ) > 1)

#Null Distributions Exercises #2
#What proportion of these 10,000 averages are more than 1 gram away from the average of population?
set.seed(1)
n <- 10000
averages5 <- c()
for(i in 1:n){
  X <- sample(population,5)
  averages5[i] <- mean(X)
}
hist(averages5) ##take a look
mean( abs( averages5 - mean(population) ) > 1)

#Null Distributions Exercises #3
set.seed(1)
n <- 1000
averages50 <- c()
for(i in 1:n){
  X <- sample(population,50)
  averages50[i] <- mean(X)
}
hist(averages50)    ##take a look
mean( abs( averages50 - mean(population) ) > 1)

##----------------------------------------------------------------------
#Probability Distributions Exercises #1
library(gapminder)
data(gapminder)
head(gapminder)
data.1952 <- filter(gapminder , year == "1952") %>% dplyr::select(lifeExp) %>% unlist
mean(data.1952 <= 40)

#Probability Distributions Exercises #2
mean(data.1952 <= 60) - mean(data.1952 <= 40)

#Probability Distributions Exercises #3
prop = function(q) {
  mean(data.1952 <= q)
}
prop(40)
qs = seq(from = min(data.1952) , to = max(data.1952) , length = 20) ; qs
props <- sapply(qs , prop) ; props
plot(qs , props) ## Homemade function

plot(ecdf(data.1952)) ## Built in ecdf function

##----------------------------------------------------------------------
#Normal Distribution Exercises #1
#make average5
mypar(1,2)
set.seed(1)
n <- 1000
averages5 <- vector("numeric",n)
for(i in 1:n){
  X <- sample(population,5)
  averages5[i] <- mean(X)
}
hist(averages5)
# make averages50
set.seed(1)
n <- 1000
averages50 <- vector("numeric",n)
for(i in 1:n){
  X <- sample(population,50)
  averages50[i] <- mean(X)
}
hist(averages50)

#Normal Distribution Exercises #2
# From a sample size of 50, what proportion are between 23 and 25?
mean(averages50 <= 25) - mean(averages50 <= 23)

#Normal Distribution Exercises #3
# What is the proportion of observations between 23 and 25 in a normal distribution with average 23.9 and standard deviation 0.43?
p1 <- pnorm(q = 23 , mean = 23.9 , sd = 0.43)
p2 <- pnorm(q = 25 , mean = 23.9 , sd = 0.43)
p2 - p1
##---------------------------------------------------------------------
##Population, Samples, and Estimates Exercises #1
dat <- read.csv("mice_pheno.csv")
View(dat)
dat <- na.omit(dat)
x <- filter(dat , Sex =="M" , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
mean(x)
#Population, Samples, and Estimates Exercises #2
popsd(x)
#Population, Samples, and Estimates Exercises #3
set.seed(1)
X <- sample(x , 25)
Xmean <- mean(X)
#Population, Samples, and Estimates Exercises #4
y <- filter(dat , Sex =="M" , Diet == "hf") %>% dplyr::select(Bodyweight) %>% unlist
mean(y)
#Population, Samples, and Estimates Exercises #5
popsd(y)
#Population, Samples, and Estimates Exercises #6
set.seed(1)
Y <- sample(y,25)
Ymean <- mean(Y)
#Population, Samples, and Estimates Exercises #7
popdiff <- mean(y) - mean(x)
samdiff <- Ymean - Xmean
abs(popdiff - samdiff)
#Population, Samples, and Estimates Exercises #8
x <- filter(dat , Sex =="F" , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
y <- filter(dat , Sex =="F" , Diet == "hf") %>% dplyr::select(Bodyweight) %>% unlist
mean(x)
mean(y)
popdiff <- mean(y) - mean(x)
set.seed(2)
X <- sample(x , 25)
mean(X)
set.seed(2)
Y <- sample(y , 25)
mean(Y)
samdiff <- mean(Y) - mean(X)
abs(popdiff - samdiff)

##---------------------------------------------------------------------  
#Central Limit Theorem Exercises #1
dat <- read.csv("mice_pheno.csv")
dat <- na.omit(dat)
p1 <- pnorm(1 , mean = 0 , sd = 1) ; p1
p2 <- pnorm(-1 , mean = 0 , sd = 1) ; p2
p1 - p2 ##68.27% of data are in one standard deviation away from the average
#Central Limit Theorem Exercises #2
p1 <- pnorm(2 , mean = 0 , sd = 1) ; p1
p2 <- pnorm(-2 , mean = 0 , sd = 1) ; p2
p1 - p2 ##95.45% of data are in two standard deviation away from the average
#Central Limit Theorem Exercises #3
p1 <- pnorm(3 , mean = 0 , sd = 1) ; p1
p2 <- pnorm(-3 , mean = 0 , sd = 1) ; p2
p1 - p2 ##99.73% of data are in three standard deviation away from the average
#Central Limit Theorem Exercises #4
y <- filter(dat , Sex =="M" , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
mean(y)
popsd(y)
z <- ( y - mean(y) ) / popsd(y)
mean( abs(z) <= 1 )
#Central Limit Theorem Exercises #5
mean( abs(z) <= 2 )
#Central Limit Theorem Exercises #6
mean( abs(z) <= 3 )
#Central Limit Theorem Exercises #7
qqnorm(z)
abline(0,1)
#Central Limit Theorem Exercises #8
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% dplyr::select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% dplyr::select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% dplyr::select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% dplyr::select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#Central Limit Theorem Exercises #9
y <- filter(dat, Sex=="M" & Diet=="chow") %>% dplyr::select(Bodyweight) %>% unlist
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
#Central Limit Theorem Exercises #10
popsd(avgs)
##---------------------------------------------------------------------
library(rafalib)
mypar(1,2)
n <- 10000
nulls <- c()
for(i in 1:n){
  control <- sample(population , 12)
  treatment <- sample(population , 12)
  nulls[i] <- mean(treatment) - mean(control)
}
qqnorm(nulls)
qqline(nulls)
nulls <- c()
for(i in 1:n){
  control <- sample(population , 3)
  treatment <- sample(population , 3)
  nulls[i] <- mean(treatment) - mean(control)
}
qqnorm(nulls)
qqline(nulls)
#######################################################################
##T tests in practice
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
control <- filter(dat , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
treatment <- filter(dat , Diet == "hf") %>% dplyr::select(Bodyweight) %>% unlist
obs <- mean(treatment) - mean(control)
N <- length(treatment)
se <- sqrt(var(control) / N + var(treatment) / N)
tstat <- obs / se
pnorm(tstat)
pvalue <- 2*(1-pnorm(tstat)) ; pvalue
population <- read.csv("femaleControlsPopulation.csv")
population <- unlist(population)  ##numeric values
n <- 10000
nulls.tstat <- c()
for(i in 1:n){
  control <- sample(population , N)
  treatment <- sample(population , N)
  se <- sqrt(var(control) / N + var(treatment) / N)
  nulls.tstat[i] <- (mean(treatment) - mean(control)) / se   #this will give us the actual null distribution of that t-statistic
}                                                            #we're assuming, using central limit theorem that it is, in fact, normally distributed.
mypar(1,1)
qqnorm(nulls.tstat)
qqline(nulls.tstat)  ##So the p-value we obtained is a good approximation of the actual p-value.

##
n <- 10000
nulls.tstat <- c()
for(i in 1:n){
  control <- sample(population , 3)
  treatment <- sample(population , 3)
  se <- sqrt(var(control) / 3 + var(treatment) / 3)
  nulls.tstat[i] <- (mean(treatment) - mean(control)) / se  
}                                                            
mypar(1,1)
qqnorm(nulls.tstat)
qqline(nulls.tstat) ##sample size = 3 does not make a good approximation
                    ## In this case we would instead use the t approximation

##-----------------------------------------------------------------------
##T test in practice 2
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
control <- filter(dat , Diet == "chow") %>% dplyr::select(Bodyweight) %>% unlist
treatment <- filter(dat , Diet == "hf") %>% dplyr::select(Bodyweight) %>% unlist
ttest <- t.test(treatment , control) ; ttest
mypar(1,2)
qqnorm(control)
qqline(control)
qqnorm(treatment)
qqline(treatment)
#CLT and t-distribution in Practice Exercises #1
n = 100
x = sample(1:6, n, replace = TRUE)
mean(x == 6)
p = 1/6    ## mean
p*(1-p)/n  ## variance
z = (mean(x==6) - p) / sqrt(p*(1-p)/n) ##So according to CLT, z should be normal with mean 0 and sd 1
set.seed(1)
z = replicate(10000 , (mean(sample(1:6 , n , replace = T) == 6) - p) / sqrt(p*(1-p)/n))
z
mean(abs(z) > 2)
qqnorm(z)
qqline(z)
#CLT and t-distribution in Practice Exercises #2
#For n = 5 and p = 0.5
mypar(1,4)
n = 5
p = 0.5
x = sample(1:6, n, replace = TRUE)
z = replicate(10000 , (mean(sample(1:6 , n , replace = T) == 6) - p) / sqrt(p*(1-p)/n))
qqnorm(z)
qqline(z)
#For n = 30 and p = 0.5
n = 30
p = 0.5
x = sample(1:6, n, replace = TRUE)
z = replicate(10000 , (mean(sample(1:6 , n , replace = T) == 6) - p) / sqrt(p*(1-p)/n))
qqnorm(z)
qqline(z)
#For n = 30 and p = 0.01
n = 30
p = 0.01
x = sample(1:6, n, replace = TRUE)
z = replicate(10000 , (mean(sample(1:6 , n , replace = T) == 6) - p) / sqrt(p*(1-p)/n))
qqnorm(z)
qqline(z)
#For n = 100 and p = 0.01
n = 100
p = 0.01
x = sample(1:6, n, replace = TRUE)
z = replicate(10000 , (mean(sample(1:6 , n , replace = T) == 6) - p) / sqrt(p*(1-p)/n))
qqnorm(z)
qqline(z)

ps <- c(0.5,0.5,0.01,0.01)
ns <- c(5,30,30,100)
library(rafalib)
mypar(4,2)
for(i in 1:4){
  p <- ps[i]
  sides <- 1/p
  n <- ns[i]
  zs <- replicate(10000,{
    x <- sample(1:sides,n,replace=TRUE)
    (mean(x==1) - p) / sqrt(p*(1-p)/n)
  }) 
  hist(zs,nclass=7)
  qqnorm(zs)
  abline(0,1)
}